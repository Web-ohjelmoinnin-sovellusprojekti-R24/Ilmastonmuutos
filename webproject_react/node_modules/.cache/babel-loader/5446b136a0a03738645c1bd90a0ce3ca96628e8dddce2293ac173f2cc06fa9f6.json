{"ast":null,"code":"import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new Formatter(locale, opts);\n  }\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: bracketed,\n            val: currentFull\n          });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({\n            literal: false,\n            val: currentFull\n          });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n    if (currentFull.length > 0) {\n      splits.push({\n        literal: bracketed,\n        val: currentFull\n      });\n    }\n    return splits;\n  }\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, {\n      ...this.opts,\n      ...opts\n    });\n    return df.format();\n  }\n  formatDateTime(dt) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const df = this.loc.dtFormatter(dt, {\n      ...this.opts,\n      ...opts\n    });\n    return df.format();\n  }\n  formatDateTimeParts(dt) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const df = this.loc.dtFormatter(dt, {\n      ...this.opts,\n      ...opts\n    });\n    return df.formatToParts();\n  }\n  resolvedOptions(dt) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const df = this.loc.dtFormatter(dt, {\n      ...this.opts,\n      ...opts\n    });\n    return df.resolvedOptions();\n  }\n  num(n) {\n    let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n    const opts = {\n      ...this.opts\n    };\n    if (p > 0) {\n      opts.padTo = p;\n    }\n    return this.loc.numberFormatter(opts).format(n);\n  }\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () => knownEnglish ? English.meridiemForDateTime(dt) : string({\n        hour: \"numeric\",\n        hourCycle: \"h12\"\n      }, \"dayperiod\"),\n      month = (length, standalone) => knownEnglish ? English.monthForDateTime(dt, length) : string(standalone ? {\n        month: length\n      } : {\n        month: length,\n        day: \"numeric\"\n      }, \"month\"),\n      weekday = (length, standalone) => knownEnglish ? English.weekdayForDateTime(dt, length) : string(standalone ? {\n        weekday: length\n      } : {\n        weekday: length,\n        month: \"long\",\n        day: \"numeric\"\n      }, \"weekday\"),\n      maybeMacro = token => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = length => knownEnglish ? English.eraForDateTime(dt, length) : string({\n        era: length\n      }, \"era\"),\n      tokenToString = token => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({\n              format: \"narrow\",\n              allowZ: this.opts.allowZ\n            });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({\n              format: \"short\",\n              allowZ: this.opts.allowZ\n            });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({\n              format: \"techie\",\n              allowZ: this.opts.allowZ\n            });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, {\n              format: \"short\",\n              locale: this.loc.locale\n            });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, {\n              format: \"long\",\n              locale: this.loc.locale\n            });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({\n              day: \"numeric\"\n            }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({\n              day: \"2-digit\"\n            }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter ? string({\n              month: \"numeric\",\n              day: \"numeric\"\n            }, \"month\") : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter ? string({\n              month: \"2-digit\",\n              day: \"numeric\"\n            }, \"month\") : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter ? string({\n              month: \"numeric\"\n            }, \"month\") : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter ? string({\n              month: \"2-digit\"\n            }, \"month\") : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter ? string({\n              year: \"2-digit\"\n            }, \"year\") : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter ? string({\n              year: \"numeric\"\n            }, \"year\") : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce((found, _ref) => {\n        let {\n          literal,\n          val\n        } = _ref;\n        return literal ? found : found.concat(val);\n      }, []),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}","map":{"version":3,"names":["English","Formats","padStart","stringifyTokens","splits","tokenToString","s","token","literal","val","macroTokenToFormatOpts","D","DATE_SHORT","DD","DATE_MED","DDD","DATE_FULL","DDDD","DATE_HUGE","t","TIME_SIMPLE","tt","TIME_WITH_SECONDS","ttt","TIME_WITH_SHORT_OFFSET","tttt","TIME_WITH_LONG_OFFSET","T","TIME_24_SIMPLE","TT","TIME_24_WITH_SECONDS","TTT","TIME_24_WITH_SHORT_OFFSET","TTTT","TIME_24_WITH_LONG_OFFSET","f","DATETIME_SHORT","ff","DATETIME_MED","fff","DATETIME_FULL","ffff","DATETIME_HUGE","F","DATETIME_SHORT_WITH_SECONDS","FF","DATETIME_MED_WITH_SECONDS","FFF","DATETIME_FULL_WITH_SECONDS","FFFF","DATETIME_HUGE_WITH_SECONDS","Formatter","create","locale","opts","parseFormat","fmt","current","currentFull","bracketed","i","length","c","charAt","push","constructor","formatOpts","loc","systemLoc","formatWithSystemDefault","dt","redefaultToSystem","df","dtFormatter","format","formatDateTime","formatDateTimeParts","formatToParts","resolvedOptions","num","n","p","forceSimple","padTo","numberFormatter","formatDateTimeFromString","knownEnglish","listingMode","useDateTimeFormatter","outputCalendar","string","extract","formatOffset","isOffsetFixed","offset","allowZ","isValid","zone","ts","meridiem","meridiemForDateTime","hour","hourCycle","month","standalone","monthForDateTime","day","weekday","weekdayForDateTime","maybeMacro","era","eraForDateTime","millisecond","second","Math","floor","minute","offsetName","zoneName","year","toString","slice","weekYear","weekNumber","ordinal","quarter","formatDurationFromString","dur","tokenToField","lildur","mapped","get","tokens","realTokens","reduce","found","concat","collapsed","shiftTo","map","filter"],"sources":["C:/Users/topia/OneDrive/Työpöytä/Ilmastonmuutos/webproject_react/node_modules/luxon/src/impl/formatter.js"],"sourcesContent":["import * as English from \"./english.js\";\nimport * as Formats from \"./formats.js\";\nimport { padStart } from \"./util.js\";\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = \"\";\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst macroTokenToFormatOpts = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS,\n};\n\n/**\n * @private\n */\n\nexport default class Formatter {\n  static create(locale, opts = {}) {\n    return new Formatter(locale, opts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = \"\",\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = \"\";\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  static macroTokenToFormatOpts(token) {\n    return macroTokenToFormatOpts[token];\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    // we get some perf out of doing this here, annoyingly\n    if (this.opts.forceSimple) {\n      return padStart(n, p);\n    }\n\n    const opts = { ...this.opts };\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === \"en\",\n      useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== \"gregory\",\n      string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = (opts) => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return \"Z\";\n        }\n\n        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : \"\";\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: \"numeric\", hourCycle: \"h12\" }, \"dayperiod\"),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: \"numeric\" }, \"month\"),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: \"long\", day: \"numeric\" },\n              \"weekday\"\n            ),\n      maybeMacro = (token) => {\n        const formatOpts = Formatter.macroTokenToFormatOpts(token);\n        if (formatOpts) {\n          return this.formatWithSystemDefault(dt, formatOpts);\n        } else {\n          return token;\n        }\n      },\n      era = (length) =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, \"era\"),\n      tokenToString = (token) => {\n        // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case \"S\":\n            return this.num(dt.millisecond);\n          case \"u\":\n          // falls through\n          case \"SSS\":\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case \"s\":\n            return this.num(dt.second);\n          case \"ss\":\n            return this.num(dt.second, 2);\n          // fractional seconds\n          case \"uu\":\n            return this.num(Math.floor(dt.millisecond / 10), 2);\n          case \"uuu\":\n            return this.num(Math.floor(dt.millisecond / 100));\n          // minutes\n          case \"m\":\n            return this.num(dt.minute);\n          case \"mm\":\n            return this.num(dt.minute, 2);\n          // hours\n          case \"h\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case \"hh\":\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case \"H\":\n            return this.num(dt.hour);\n          case \"HH\":\n            return this.num(dt.hour, 2);\n          // offset\n          case \"Z\":\n            // like +6\n            return formatOffset({ format: \"narrow\", allowZ: this.opts.allowZ });\n          case \"ZZ\":\n            // like +06:00\n            return formatOffset({ format: \"short\", allowZ: this.opts.allowZ });\n          case \"ZZZ\":\n            // like +0600\n            return formatOffset({ format: \"techie\", allowZ: this.opts.allowZ });\n          case \"ZZZZ\":\n            // like EST\n            return dt.zone.offsetName(dt.ts, { format: \"short\", locale: this.loc.locale });\n          case \"ZZZZZ\":\n            // like Eastern Standard Time\n            return dt.zone.offsetName(dt.ts, { format: \"long\", locale: this.loc.locale });\n          // zone\n          case \"z\":\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case \"a\":\n            return meridiem();\n          // dates\n          case \"d\":\n            return useDateTimeFormatter ? string({ day: \"numeric\" }, \"day\") : this.num(dt.day);\n          case \"dd\":\n            return useDateTimeFormatter ? string({ day: \"2-digit\" }, \"day\") : this.num(dt.day, 2);\n          // weekdays - standalone\n          case \"c\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"ccc\":\n            // like 'Tues'\n            return weekday(\"short\", true);\n          case \"cccc\":\n            // like 'Tuesday'\n            return weekday(\"long\", true);\n          case \"ccccc\":\n            // like 'T'\n            return weekday(\"narrow\", true);\n          // weekdays - format\n          case \"E\":\n            // like 1\n            return this.num(dt.weekday);\n          case \"EEE\":\n            // like 'Tues'\n            return weekday(\"short\", false);\n          case \"EEEE\":\n            // like 'Tuesday'\n            return weekday(\"long\", false);\n          case \"EEEEE\":\n            // like 'T'\n            return weekday(\"narrow\", false);\n          // months - standalone\n          case \"L\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"LL\":\n            // like 01, doesn't seem to work\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\", day: \"numeric\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"LLL\":\n            // like Jan\n            return month(\"short\", true);\n          case \"LLLL\":\n            // like January\n            return month(\"long\", true);\n          case \"LLLLL\":\n            // like J\n            return month(\"narrow\", true);\n          // months - format\n          case \"M\":\n            // like 1\n            return useDateTimeFormatter\n              ? string({ month: \"numeric\" }, \"month\")\n              : this.num(dt.month);\n          case \"MM\":\n            // like 01\n            return useDateTimeFormatter\n              ? string({ month: \"2-digit\" }, \"month\")\n              : this.num(dt.month, 2);\n          case \"MMM\":\n            // like Jan\n            return month(\"short\", false);\n          case \"MMMM\":\n            // like January\n            return month(\"long\", false);\n          case \"MMMMM\":\n            // like J\n            return month(\"narrow\", false);\n          // years\n          case \"y\":\n            // like 2014\n            return useDateTimeFormatter ? string({ year: \"numeric\" }, \"year\") : this.num(dt.year);\n          case \"yy\":\n            // like 14\n            return useDateTimeFormatter\n              ? string({ year: \"2-digit\" }, \"year\")\n              : this.num(dt.year.toString().slice(-2), 2);\n          case \"yyyy\":\n            // like 0012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 4);\n          case \"yyyyyy\":\n            // like 000012\n            return useDateTimeFormatter\n              ? string({ year: \"numeric\" }, \"year\")\n              : this.num(dt.year, 6);\n          // eras\n          case \"G\":\n            // like AD\n            return era(\"short\");\n          case \"GG\":\n            // like Anno Domini\n            return era(\"long\");\n          case \"GGGGG\":\n            return era(\"narrow\");\n          case \"kk\":\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case \"kkkk\":\n            return this.num(dt.weekYear, 4);\n          case \"W\":\n            return this.num(dt.weekNumber);\n          case \"WW\":\n            return this.num(dt.weekNumber, 2);\n          case \"o\":\n            return this.num(dt.ordinal);\n          case \"ooo\":\n            return this.num(dt.ordinal, 3);\n          case \"q\":\n            // like 1\n            return this.num(dt.quarter);\n          case \"qq\":\n            // like 01\n            return this.num(dt.quarter, 2);\n          case \"X\":\n            return this.num(Math.floor(dt.ts / 1000));\n          case \"x\":\n            return this.num(dt.ts);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = (token) => {\n        switch (token[0]) {\n          case \"S\":\n            return \"millisecond\";\n          case \"s\":\n            return \"second\";\n          case \"m\":\n            return \"minute\";\n          case \"h\":\n            return \"hour\";\n          case \"d\":\n            return \"day\";\n          case \"w\":\n            return \"week\";\n          case \"M\":\n            return \"month\";\n          case \"y\":\n            return \"year\";\n          default:\n            return null;\n        }\n      },\n      tokenToString = (lildur) => (token) => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t) => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}