{"ast":null,"code":"import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    let explanation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid\n      });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n    const validateError = validateStartEnd(builtStart, builtEnd);\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length() {\n    let unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count() {\n    let unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"milliseconds\";\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set() {\n    let {\n      start,\n      end\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt() {\n    if (!this.isValid) return [];\n    for (var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++) {\n      dateTimes[_key] = arguments[_key];\n    }\n    const sorted = dateTimes.map(friendlyDateTime).filter(d => this.contains(d)).sort(),\n      results = [];\n    let {\n        s\n      } = this,\n      i = 0;\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n    let {\n        s\n      } = this,\n      idx = 1,\n      next;\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits(x => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce((_ref, item) => {\n      let [sofar, current] = _ref;\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{\n        time: i.s,\n        type: \"s\"\n      }, {\n        time: i.e,\n        type: \"e\"\n      }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n        start = null;\n      }\n    }\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference() {\n    for (var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      intervals[_key2] = arguments[_key2];\n    }\n    return Interval.xor([this].concat(intervals)).map(i => this.intersection(i)).filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat) {\n    let {\n      separator = \" – \"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}","map":{"version":3,"names":["DateTime","friendlyDateTime","Duration","Settings","InvalidArgumentError","InvalidIntervalError","Invalid","INVALID","validateStartEnd","start","end","isValid","Interval","invalid","toISO","constructor","config","s","e","isLuxonInterval","reason","explanation","throwOnInvalid","fromDateTimes","builtStart","builtEnd","validateError","after","duration","dur","fromDurationLike","dt","plus","before","minus","fromISO","text","opts","split","startIsValid","endIsValid","isInterval","o","invalidReason","invalidExplanation","length","unit","toDuration","get","NaN","count","startOf","Math","floor","diff","hasSame","isEmpty","valueOf","isAfter","dateTime","isBefore","contains","set","splitAt","dateTimes","sorted","map","filter","d","sort","results","i","added","next","push","splitBy","as","idx","mapUnits","x","divideEqually","numberOfParts","slice","overlaps","other","abutsStart","abutsEnd","engulfs","equals","intersection","union","merge","intervals","found","final","a","b","reduce","item","sofar","current","concat","xor","currentCount","ends","time","type","flattened","Array","prototype","arr","difference","toString","toISODate","toISOTime","toFormat","dateFormat","separator","mapEndpoints","mapFn"],"sources":["C:/Users/topia/OneDrive/Työpöytä/Ilmastonmuutos/webproject_react/node_modules/luxon/src/interval.js"],"sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.\n * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.\n * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}\n * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd,\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Duration.fromDurationLike(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTime} dateTimes - the unit of time to count.\n   * @return {Array}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter((d) => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {Array}\n   */\n  splitBy(duration) {\n    const dur = Duration.fromDurationLike(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      idx = 1,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      const added = this.start.plus(dur.mapUnits((x) => x * idx));\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      idx += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {Array}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s >= e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals\n      .sort((a, b) => a.s - b.s)\n      .reduce(\n        ([sofar, current], item) => {\n          if (!current) {\n            return [sofar, item];\n          } else if (current.overlaps(item) || current.abutsStart(item)) {\n            return [sofar, current.union(item)];\n          } else {\n            return [sofar.concat([current]), item];\n          }\n        },\n        [[], null]\n      );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {Array} intervals\n   * @return {Array}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map((i) => [\n        { time: i.s, type: \"s\" },\n        { time: i.e, type: \"e\" },\n      ]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Array}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map((i) => this.intersection(i))\n      .filter((i) => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime#toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime#toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,IAAIC,gBAAgB,QAAQ,eAAe;AAC1D,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAASC,oBAAoB,EAAEC,oBAAoB,QAAQ,aAAa;AACxE,OAAOC,OAAO,MAAM,mBAAmB;AAEvC,MAAMC,OAAO,GAAG,kBAAkB;;AAElC;AACA,SAASC,gBAAgB,CAACC,KAAK,EAAEC,GAAG,EAAE;EACpC,IAAI,CAACD,KAAK,IAAI,CAACA,KAAK,CAACE,OAAO,EAAE;IAC5B,OAAOC,QAAQ,CAACC,OAAO,CAAC,0BAA0B,CAAC;EACrD,CAAC,MAAM,IAAI,CAACH,GAAG,IAAI,CAACA,GAAG,CAACC,OAAO,EAAE;IAC/B,OAAOC,QAAQ,CAACC,OAAO,CAAC,wBAAwB,CAAC;EACnD,CAAC,MAAM,IAAIH,GAAG,GAAGD,KAAK,EAAE;IACtB,OAAOG,QAAQ,CAACC,OAAO,CACrB,kBAAkB,EACjB,qEAAoEJ,KAAK,CAACK,KAAK,EAAG,YAAWJ,GAAG,CAACI,KAAK,EAAG,EAAC,CAC5G;EACH,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMF,QAAQ,CAAC;EAC5B;AACF;AACA;EACEG,WAAW,CAACC,MAAM,EAAE;IAClB;AACJ;AACA;IACI,IAAI,CAACC,CAAC,GAAGD,MAAM,CAACP,KAAK;IACrB;AACJ;AACA;IACI,IAAI,CAACS,CAAC,GAAGF,MAAM,CAACN,GAAG;IACnB;AACJ;AACA;IACI,IAAI,CAACG,OAAO,GAAGG,MAAM,CAACH,OAAO,IAAI,IAAI;IACrC;AACJ;AACA;IACI,IAAI,CAACM,eAAe,GAAG,IAAI;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAON,OAAO,CAACO,MAAM,EAAsB;IAAA,IAApBC,WAAW,uEAAG,IAAI;IACvC,IAAI,CAACD,MAAM,EAAE;MACX,MAAM,IAAIhB,oBAAoB,CAAC,kDAAkD,CAAC;IACpF;IAEA,MAAMS,OAAO,GAAGO,MAAM,YAAYd,OAAO,GAAGc,MAAM,GAAG,IAAId,OAAO,CAACc,MAAM,EAAEC,WAAW,CAAC;IAErF,IAAIlB,QAAQ,CAACmB,cAAc,EAAE;MAC3B,MAAM,IAAIjB,oBAAoB,CAACQ,OAAO,CAAC;IACzC,CAAC,MAAM;MACL,OAAO,IAAID,QAAQ,CAAC;QAAEC;MAAQ,CAAC,CAAC;IAClC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOU,aAAa,CAACd,KAAK,EAAEC,GAAG,EAAE;IAC/B,MAAMc,UAAU,GAAGvB,gBAAgB,CAACQ,KAAK,CAAC;MACxCgB,QAAQ,GAAGxB,gBAAgB,CAACS,GAAG,CAAC;IAElC,MAAMgB,aAAa,GAAGlB,gBAAgB,CAACgB,UAAU,EAAEC,QAAQ,CAAC;IAE5D,IAAIC,aAAa,IAAI,IAAI,EAAE;MACzB,OAAO,IAAId,QAAQ,CAAC;QAClBH,KAAK,EAAEe,UAAU;QACjBd,GAAG,EAAEe;MACP,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,OAAOC,aAAa;IACtB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOC,KAAK,CAAClB,KAAK,EAAEmB,QAAQ,EAAE;IAC5B,MAAMC,GAAG,GAAG3B,QAAQ,CAAC4B,gBAAgB,CAACF,QAAQ,CAAC;MAC7CG,EAAE,GAAG9B,gBAAgB,CAACQ,KAAK,CAAC;IAC9B,OAAOG,QAAQ,CAACW,aAAa,CAACQ,EAAE,EAAEA,EAAE,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOI,MAAM,CAACvB,GAAG,EAAEkB,QAAQ,EAAE;IAC3B,MAAMC,GAAG,GAAG3B,QAAQ,CAAC4B,gBAAgB,CAACF,QAAQ,CAAC;MAC7CG,EAAE,GAAG9B,gBAAgB,CAACS,GAAG,CAAC;IAC5B,OAAOE,QAAQ,CAACW,aAAa,CAACQ,EAAE,CAACG,KAAK,CAACL,GAAG,CAAC,EAAEE,EAAE,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,OAAO,CAACC,IAAI,EAAEC,IAAI,EAAE;IACzB,MAAM,CAACpB,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACkB,IAAI,IAAI,EAAE,EAAEE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACzC,IAAIrB,CAAC,IAAIC,CAAC,EAAE;MACV,IAAIT,KAAK,EAAE8B,YAAY;MACvB,IAAI;QACF9B,KAAK,GAAGT,QAAQ,CAACmC,OAAO,CAAClB,CAAC,EAAEoB,IAAI,CAAC;QACjCE,YAAY,GAAG9B,KAAK,CAACE,OAAO;MAC9B,CAAC,CAAC,OAAOO,CAAC,EAAE;QACVqB,YAAY,GAAG,KAAK;MACtB;MAEA,IAAI7B,GAAG,EAAE8B,UAAU;MACnB,IAAI;QACF9B,GAAG,GAAGV,QAAQ,CAACmC,OAAO,CAACjB,CAAC,EAAEmB,IAAI,CAAC;QAC/BG,UAAU,GAAG9B,GAAG,CAACC,OAAO;MAC1B,CAAC,CAAC,OAAOO,CAAC,EAAE;QACVsB,UAAU,GAAG,KAAK;MACpB;MAEA,IAAID,YAAY,IAAIC,UAAU,EAAE;QAC9B,OAAO5B,QAAQ,CAACW,aAAa,CAACd,KAAK,EAAEC,GAAG,CAAC;MAC3C;MAEA,IAAI6B,YAAY,EAAE;QAChB,MAAMV,GAAG,GAAG3B,QAAQ,CAACiC,OAAO,CAACjB,CAAC,EAAEmB,IAAI,CAAC;QACrC,IAAIR,GAAG,CAAClB,OAAO,EAAE;UACf,OAAOC,QAAQ,CAACe,KAAK,CAAClB,KAAK,EAAEoB,GAAG,CAAC;QACnC;MACF,CAAC,MAAM,IAAIW,UAAU,EAAE;QACrB,MAAMX,GAAG,GAAG3B,QAAQ,CAACiC,OAAO,CAAClB,CAAC,EAAEoB,IAAI,CAAC;QACrC,IAAIR,GAAG,CAAClB,OAAO,EAAE;UACf,OAAOC,QAAQ,CAACqB,MAAM,CAACvB,GAAG,EAAEmB,GAAG,CAAC;QAClC;MACF;IACF;IACA,OAAOjB,QAAQ,CAACC,OAAO,CAAC,YAAY,EAAG,cAAauB,IAAK,+BAA8B,CAAC;EAC1F;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOK,UAAU,CAACC,CAAC,EAAE;IACnB,OAAQA,CAAC,IAAIA,CAAC,CAACvB,eAAe,IAAK,KAAK;EAC1C;;EAEA;AACF;AACA;AACA;EACE,IAAIV,KAAK,GAAG;IACV,OAAO,IAAI,CAACE,OAAO,GAAG,IAAI,CAACM,CAAC,GAAG,IAAI;EACrC;;EAEA;AACF;AACA;AACA;EACE,IAAIP,GAAG,GAAG;IACR,OAAO,IAAI,CAACC,OAAO,GAAG,IAAI,CAACO,CAAC,GAAG,IAAI;EACrC;;EAEA;AACF;AACA;AACA;EACE,IAAIP,OAAO,GAAG;IACZ,OAAO,IAAI,CAACgC,aAAa,KAAK,IAAI;EACpC;;EAEA;AACF;AACA;AACA;EACE,IAAIA,aAAa,GAAG;IAClB,OAAO,IAAI,CAAC9B,OAAO,GAAG,IAAI,CAACA,OAAO,CAACO,MAAM,GAAG,IAAI;EAClD;;EAEA;AACF;AACA;AACA;EACE,IAAIwB,kBAAkB,GAAG;IACvB,OAAO,IAAI,CAAC/B,OAAO,GAAG,IAAI,CAACA,OAAO,CAACQ,WAAW,GAAG,IAAI;EACvD;;EAEA;AACF;AACA;AACA;AACA;EACEwB,MAAM,GAAwB;IAAA,IAAvBC,IAAI,uEAAG,cAAc;IAC1B,OAAO,IAAI,CAACnC,OAAO,GAAG,IAAI,CAACoC,UAAU,CAAC,GAAG,CAACD,IAAI,CAAC,CAAC,CAACE,GAAG,CAACF,IAAI,CAAC,GAAGG,GAAG;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,GAAwB;IAAA,IAAvBJ,IAAI,uEAAG,cAAc;IACzB,IAAI,CAAC,IAAI,CAACnC,OAAO,EAAE,OAAOsC,GAAG;IAC7B,MAAMxC,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC0C,OAAO,CAACL,IAAI,CAAC;MACpCpC,GAAG,GAAG,IAAI,CAACA,GAAG,CAACyC,OAAO,CAACL,IAAI,CAAC;IAC9B,OAAOM,IAAI,CAACC,KAAK,CAAC3C,GAAG,CAAC4C,IAAI,CAAC7C,KAAK,EAAEqC,IAAI,CAAC,CAACE,GAAG,CAACF,IAAI,CAAC,CAAC,GAAG,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;EACES,OAAO,CAACT,IAAI,EAAE;IACZ,OAAO,IAAI,CAACnC,OAAO,GAAG,IAAI,CAAC6C,OAAO,EAAE,IAAI,IAAI,CAACtC,CAAC,CAACgB,KAAK,CAAC,CAAC,CAAC,CAACqB,OAAO,CAAC,IAAI,CAACtC,CAAC,EAAE6B,IAAI,CAAC,GAAG,KAAK;EACvF;;EAEA;AACF;AACA;AACA;EACEU,OAAO,GAAG;IACR,OAAO,IAAI,CAACvC,CAAC,CAACwC,OAAO,EAAE,KAAK,IAAI,CAACvC,CAAC,CAACuC,OAAO,EAAE;EAC9C;;EAEA;AACF;AACA;AACA;AACA;EACEC,OAAO,CAACC,QAAQ,EAAE;IAChB,IAAI,CAAC,IAAI,CAAChD,OAAO,EAAE,OAAO,KAAK;IAC/B,OAAO,IAAI,CAACM,CAAC,GAAG0C,QAAQ;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EACEC,QAAQ,CAACD,QAAQ,EAAE;IACjB,IAAI,CAAC,IAAI,CAAChD,OAAO,EAAE,OAAO,KAAK;IAC/B,OAAO,IAAI,CAACO,CAAC,IAAIyC,QAAQ;EAC3B;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQ,CAACF,QAAQ,EAAE;IACjB,IAAI,CAAC,IAAI,CAAChD,OAAO,EAAE,OAAO,KAAK;IAC/B,OAAO,IAAI,CAACM,CAAC,IAAI0C,QAAQ,IAAI,IAAI,CAACzC,CAAC,GAAGyC,QAAQ;EAChD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,GAAG,GAAsB;IAAA,IAArB;MAAErD,KAAK;MAAEC;IAAI,CAAC,uEAAG,CAAC,CAAC;IACrB,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE,OAAO,IAAI;IAC9B,OAAOC,QAAQ,CAACW,aAAa,CAACd,KAAK,IAAI,IAAI,CAACQ,CAAC,EAAEP,GAAG,IAAI,IAAI,CAACQ,CAAC,CAAC;EAC/D;;EAEA;AACF;AACA;AACA;AACA;EACE6C,OAAO,GAAe;IACpB,IAAI,CAAC,IAAI,CAACpD,OAAO,EAAE,OAAO,EAAE;IAAC,kCADpBqD,SAAS;MAATA,SAAS;IAAA;IAElB,MAAMC,MAAM,GAAGD,SAAS,CACnBE,GAAG,CAACjE,gBAAgB,CAAC,CACrBkE,MAAM,CAAEC,CAAC,IAAK,IAAI,CAACP,QAAQ,CAACO,CAAC,CAAC,CAAC,CAC/BC,IAAI,EAAE;MACTC,OAAO,GAAG,EAAE;IACd,IAAI;QAAErD;MAAE,CAAC,GAAG,IAAI;MACdsD,CAAC,GAAG,CAAC;IAEP,OAAOtD,CAAC,GAAG,IAAI,CAACC,CAAC,EAAE;MACjB,MAAMsD,KAAK,GAAGP,MAAM,CAACM,CAAC,CAAC,IAAI,IAAI,CAACrD,CAAC;QAC/BuD,IAAI,GAAG,CAACD,KAAK,GAAG,CAAC,IAAI,CAACtD,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGsD,KAAK;MAC1CF,OAAO,CAACI,IAAI,CAAC9D,QAAQ,CAACW,aAAa,CAACN,CAAC,EAAEwD,IAAI,CAAC,CAAC;MAC7CxD,CAAC,GAAGwD,IAAI;MACRF,CAAC,IAAI,CAAC;IACR;IAEA,OAAOD,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,OAAO,CAAC/C,QAAQ,EAAE;IAChB,MAAMC,GAAG,GAAG3B,QAAQ,CAAC4B,gBAAgB,CAACF,QAAQ,CAAC;IAE/C,IAAI,CAAC,IAAI,CAACjB,OAAO,IAAI,CAACkB,GAAG,CAAClB,OAAO,IAAIkB,GAAG,CAAC+C,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;MACjE,OAAO,EAAE;IACX;IAEA,IAAI;QAAE3D;MAAE,CAAC,GAAG,IAAI;MACd4D,GAAG,GAAG,CAAC;MACPJ,IAAI;IAEN,MAAMH,OAAO,GAAG,EAAE;IAClB,OAAOrD,CAAC,GAAG,IAAI,CAACC,CAAC,EAAE;MACjB,MAAMsD,KAAK,GAAG,IAAI,CAAC/D,KAAK,CAACuB,IAAI,CAACH,GAAG,CAACiD,QAAQ,CAAEC,CAAC,IAAKA,CAAC,GAAGF,GAAG,CAAC,CAAC;MAC3DJ,IAAI,GAAG,CAACD,KAAK,GAAG,CAAC,IAAI,CAACtD,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGsD,KAAK;MACxCF,OAAO,CAACI,IAAI,CAAC9D,QAAQ,CAACW,aAAa,CAACN,CAAC,EAAEwD,IAAI,CAAC,CAAC;MAC7CxD,CAAC,GAAGwD,IAAI;MACRI,GAAG,IAAI,CAAC;IACV;IAEA,OAAOP,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACEU,aAAa,CAACC,aAAa,EAAE;IAC3B,IAAI,CAAC,IAAI,CAACtE,OAAO,EAAE,OAAO,EAAE;IAC5B,OAAO,IAAI,CAACgE,OAAO,CAAC,IAAI,CAAC9B,MAAM,EAAE,GAAGoC,aAAa,CAAC,CAACC,KAAK,CAAC,CAAC,EAAED,aAAa,CAAC;EAC5E;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQ,CAACC,KAAK,EAAE;IACd,OAAO,IAAI,CAAClE,CAAC,GAAGkE,KAAK,CAACnE,CAAC,IAAI,IAAI,CAACA,CAAC,GAAGmE,KAAK,CAAClE,CAAC;EAC7C;;EAEA;AACF;AACA;AACA;AACA;EACEmE,UAAU,CAACD,KAAK,EAAE;IAChB,IAAI,CAAC,IAAI,CAACzE,OAAO,EAAE,OAAO,KAAK;IAC/B,OAAO,CAAC,IAAI,CAACO,CAAC,KAAK,CAACkE,KAAK,CAACnE,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEqE,QAAQ,CAACF,KAAK,EAAE;IACd,IAAI,CAAC,IAAI,CAACzE,OAAO,EAAE,OAAO,KAAK;IAC/B,OAAO,CAACyE,KAAK,CAAClE,CAAC,KAAK,CAAC,IAAI,CAACD,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEsE,OAAO,CAACH,KAAK,EAAE;IACb,IAAI,CAAC,IAAI,CAACzE,OAAO,EAAE,OAAO,KAAK;IAC/B,OAAO,IAAI,CAACM,CAAC,IAAImE,KAAK,CAACnE,CAAC,IAAI,IAAI,CAACC,CAAC,IAAIkE,KAAK,CAAClE,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;EACEsE,MAAM,CAACJ,KAAK,EAAE;IACZ,IAAI,CAAC,IAAI,CAACzE,OAAO,IAAI,CAACyE,KAAK,CAACzE,OAAO,EAAE;MACnC,OAAO,KAAK;IACd;IAEA,OAAO,IAAI,CAACM,CAAC,CAACuE,MAAM,CAACJ,KAAK,CAACnE,CAAC,CAAC,IAAI,IAAI,CAACC,CAAC,CAACsE,MAAM,CAACJ,KAAK,CAAClE,CAAC,CAAC;EACzD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEuE,YAAY,CAACL,KAAK,EAAE;IAClB,IAAI,CAAC,IAAI,CAACzE,OAAO,EAAE,OAAO,IAAI;IAC9B,MAAMM,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGmE,KAAK,CAACnE,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGmE,KAAK,CAACnE,CAAC;MAC3CC,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGkE,KAAK,CAAClE,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGkE,KAAK,CAAClE,CAAC;IAEzC,IAAID,CAAC,IAAIC,CAAC,EAAE;MACV,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAON,QAAQ,CAACW,aAAa,CAACN,CAAC,EAAEC,CAAC,CAAC;IACrC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEwE,KAAK,CAACN,KAAK,EAAE;IACX,IAAI,CAAC,IAAI,CAACzE,OAAO,EAAE,OAAO,IAAI;IAC9B,MAAMM,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGmE,KAAK,CAACnE,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGmE,KAAK,CAACnE,CAAC;MAC3CC,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGkE,KAAK,CAAClE,CAAC,GAAG,IAAI,CAACA,CAAC,GAAGkE,KAAK,CAAClE,CAAC;IACzC,OAAON,QAAQ,CAACW,aAAa,CAACN,CAAC,EAAEC,CAAC,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOyE,KAAK,CAACC,SAAS,EAAE;IACtB,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,GAAGF,SAAS,CAC7BvB,IAAI,CAAC,CAAC0B,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC9E,CAAC,GAAG+E,CAAC,CAAC/E,CAAC,CAAC,CACzBgF,MAAM,CACL,OAAmBC,IAAI,KAAK;MAAA,IAA3B,CAACC,KAAK,EAAEC,OAAO,CAAC;MACf,IAAI,CAACA,OAAO,EAAE;QACZ,OAAO,CAACD,KAAK,EAAED,IAAI,CAAC;MACtB,CAAC,MAAM,IAAIE,OAAO,CAACjB,QAAQ,CAACe,IAAI,CAAC,IAAIE,OAAO,CAACf,UAAU,CAACa,IAAI,CAAC,EAAE;QAC7D,OAAO,CAACC,KAAK,EAAEC,OAAO,CAACV,KAAK,CAACQ,IAAI,CAAC,CAAC;MACrC,CAAC,MAAM;QACL,OAAO,CAACC,KAAK,CAACE,MAAM,CAAC,CAACD,OAAO,CAAC,CAAC,EAAEF,IAAI,CAAC;MACxC;IACF,CAAC,EACD,CAAC,EAAE,EAAE,IAAI,CAAC,CACX;IACH,IAAIJ,KAAK,EAAE;MACTD,KAAK,CAACnB,IAAI,CAACoB,KAAK,CAAC;IACnB;IACA,OAAOD,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACE,OAAOS,GAAG,CAACV,SAAS,EAAE;IACpB,IAAInF,KAAK,GAAG,IAAI;MACd8F,YAAY,GAAG,CAAC;IAClB,MAAMjC,OAAO,GAAG,EAAE;MAChBkC,IAAI,GAAGZ,SAAS,CAAC1B,GAAG,CAAEK,CAAC,IAAK,CAC1B;QAAEkC,IAAI,EAAElC,CAAC,CAACtD,CAAC;QAAEyF,IAAI,EAAE;MAAI,CAAC,EACxB;QAAED,IAAI,EAAElC,CAAC,CAACrD,CAAC;QAAEwF,IAAI,EAAE;MAAI,CAAC,CACzB,CAAC;MACFC,SAAS,GAAGC,KAAK,CAACC,SAAS,CAACR,MAAM,CAAC,GAAGG,IAAI,CAAC;MAC3CM,GAAG,GAAGH,SAAS,CAACtC,IAAI,CAAC,CAAC0B,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACU,IAAI,GAAGT,CAAC,CAACS,IAAI,CAAC;IAEjD,KAAK,MAAMlC,CAAC,IAAIuC,GAAG,EAAE;MACnBP,YAAY,IAAIhC,CAAC,CAACmC,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;MAEvC,IAAIH,YAAY,KAAK,CAAC,EAAE;QACtB9F,KAAK,GAAG8D,CAAC,CAACkC,IAAI;MAChB,CAAC,MAAM;QACL,IAAIhG,KAAK,IAAI,CAACA,KAAK,KAAK,CAAC8D,CAAC,CAACkC,IAAI,EAAE;UAC/BnC,OAAO,CAACI,IAAI,CAAC9D,QAAQ,CAACW,aAAa,CAACd,KAAK,EAAE8D,CAAC,CAACkC,IAAI,CAAC,CAAC;QACrD;QAEAhG,KAAK,GAAG,IAAI;MACd;IACF;IAEA,OAAOG,QAAQ,CAAC+E,KAAK,CAACrB,OAAO,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;EACEyC,UAAU,GAAe;IAAA,mCAAXnB,SAAS;MAATA,SAAS;IAAA;IACrB,OAAOhF,QAAQ,CAAC0F,GAAG,CAAC,CAAC,IAAI,CAAC,CAACD,MAAM,CAACT,SAAS,CAAC,CAAC,CAC1C1B,GAAG,CAAEK,CAAC,IAAK,IAAI,CAACkB,YAAY,CAAClB,CAAC,CAAC,CAAC,CAChCJ,MAAM,CAAEI,CAAC,IAAKA,CAAC,IAAI,CAACA,CAAC,CAACf,OAAO,EAAE,CAAC;EACrC;;EAEA;AACF;AACA;AACA;EACEwD,QAAQ,GAAG;IACT,IAAI,CAAC,IAAI,CAACrG,OAAO,EAAE,OAAOJ,OAAO;IACjC,OAAQ,IAAG,IAAI,CAACU,CAAC,CAACH,KAAK,EAAG,MAAK,IAAI,CAACI,CAAC,CAACJ,KAAK,EAAG,GAAE;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEA,KAAK,CAACuB,IAAI,EAAE;IACV,IAAI,CAAC,IAAI,CAAC1B,OAAO,EAAE,OAAOJ,OAAO;IACjC,OAAQ,GAAE,IAAI,CAACU,CAAC,CAACH,KAAK,CAACuB,IAAI,CAAE,IAAG,IAAI,CAACnB,CAAC,CAACJ,KAAK,CAACuB,IAAI,CAAE,EAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE4E,SAAS,GAAG;IACV,IAAI,CAAC,IAAI,CAACtG,OAAO,EAAE,OAAOJ,OAAO;IACjC,OAAQ,GAAE,IAAI,CAACU,CAAC,CAACgG,SAAS,EAAG,IAAG,IAAI,CAAC/F,CAAC,CAAC+F,SAAS,EAAG,EAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,CAAC7E,IAAI,EAAE;IACd,IAAI,CAAC,IAAI,CAAC1B,OAAO,EAAE,OAAOJ,OAAO;IACjC,OAAQ,GAAE,IAAI,CAACU,CAAC,CAACiG,SAAS,CAAC7E,IAAI,CAAE,IAAG,IAAI,CAACnB,CAAC,CAACgG,SAAS,CAAC7E,IAAI,CAAE,EAAC;EAC9D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE8E,QAAQ,CAACC,UAAU,EAA8B;IAAA,IAA5B;MAAEC,SAAS,GAAG;IAAM,CAAC,uEAAG,CAAC,CAAC;IAC7C,IAAI,CAAC,IAAI,CAAC1G,OAAO,EAAE,OAAOJ,OAAO;IACjC,OAAQ,GAAE,IAAI,CAACU,CAAC,CAACkG,QAAQ,CAACC,UAAU,CAAE,GAAEC,SAAU,GAAE,IAAI,CAACnG,CAAC,CAACiG,QAAQ,CAACC,UAAU,CAAE,EAAC;EACnF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACErE,UAAU,CAACD,IAAI,EAAET,IAAI,EAAE;IACrB,IAAI,CAAC,IAAI,CAAC1B,OAAO,EAAE;MACjB,OAAOT,QAAQ,CAACW,OAAO,CAAC,IAAI,CAAC8B,aAAa,CAAC;IAC7C;IACA,OAAO,IAAI,CAACzB,CAAC,CAACoC,IAAI,CAAC,IAAI,CAACrC,CAAC,EAAE6B,IAAI,EAAET,IAAI,CAAC;EACxC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEiF,YAAY,CAACC,KAAK,EAAE;IAClB,OAAO3G,QAAQ,CAACW,aAAa,CAACgG,KAAK,CAAC,IAAI,CAACtG,CAAC,CAAC,EAAEsG,KAAK,CAAC,IAAI,CAACrG,CAAC,CAAC,CAAC;EAC7D;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}