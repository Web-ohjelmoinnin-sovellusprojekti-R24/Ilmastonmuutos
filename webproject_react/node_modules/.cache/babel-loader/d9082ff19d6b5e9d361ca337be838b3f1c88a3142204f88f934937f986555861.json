{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the latest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\n\nexport default function max(dirtyDatesArray) {\n  requiredArgs(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = toDate(dirtyDate);\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","toDate","requiredArgs","max","dirtyDatesArray","arguments","datesArray","forEach","Array","slice","call","Date","NaN","result","dirtyDate","currentDate","undefined","isNaN","Number"],"sources":["C:/Users/Miia/Documents/Webbiprojekti/Ilmastonmuutos/webproject_react/node_modules/date-fns/esm/max/index.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the latest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\r\n\r\nexport default function max(dirtyDatesArray) {\r\n  requiredArgs(1, arguments);\r\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\r\n\r\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\r\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\r\n  } else if (_typeof(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {\r\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\r\n  } else {\r\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\r\n    return new Date(NaN);\r\n  }\r\n\r\n  var result;\r\n  datesArray.forEach(function (dirtyDate) {\r\n    var currentDate = toDate(dirtyDate);\r\n\r\n    if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {\r\n      result = currentDate;\r\n    }\r\n  });\r\n  return result || new Date(NaN);\r\n}"],"mappings":"AAAA,SAASA,OAAO,CAACC,GAAG,EAAE;EAAE,yBAAyB;;EAAE,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,QAAQ,EAAE;IAAEH,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;MAAE,OAAO,OAAOA,GAAG;IAAE,CAAC;EAAE,CAAC,MAAM;IAAED,OAAO,GAAG,SAASA,OAAO,CAACC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,OAAOC,MAAM,KAAK,UAAU,IAAID,GAAG,CAACG,WAAW,KAAKF,MAAM,IAAID,GAAG,KAAKC,MAAM,CAACG,SAAS,GAAG,QAAQ,GAAG,OAAOJ,GAAG;IAAE,CAAC;EAAE;EAAE,OAAOD,OAAO,CAACC,GAAG,CAAC;AAAE;AAEzX,OAAOK,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,GAAG,CAACC,eAAe,EAAE;EAC3CF,YAAY,CAAC,CAAC,EAAEG,SAAS,CAAC;EAC1B,IAAIC,UAAU,CAAC,CAAC;;EAEhB,IAAIF,eAAe,IAAI,OAAOA,eAAe,CAACG,OAAO,KAAK,UAAU,EAAE;IACpED,UAAU,GAAGF,eAAe,CAAC,CAAC;EAChC,CAAC,MAAM,IAAIT,OAAO,CAACS,eAAe,CAAC,KAAK,QAAQ,IAAIA,eAAe,KAAK,IAAI,EAAE;IAC5EE,UAAU,GAAGE,KAAK,CAACR,SAAS,CAACS,KAAK,CAACC,IAAI,CAACN,eAAe,CAAC;EAC1D,CAAC,MAAM;IACL;IACA,OAAO,IAAIO,IAAI,CAACC,GAAG,CAAC;EACtB;EAEA,IAAIC,MAAM;EACVP,UAAU,CAACC,OAAO,CAAC,UAAUO,SAAS,EAAE;IACtC,IAAIC,WAAW,GAAGd,MAAM,CAACa,SAAS,CAAC;IAEnC,IAAID,MAAM,KAAKG,SAAS,IAAIH,MAAM,GAAGE,WAAW,IAAIE,KAAK,CAACC,MAAM,CAACH,WAAW,CAAC,CAAC,EAAE;MAC9EF,MAAM,GAAGE,WAAW;IACtB;EACF,CAAC,CAAC;EACF,OAAOF,MAAM,IAAI,IAAIF,IAAI,CAACC,GAAG,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}