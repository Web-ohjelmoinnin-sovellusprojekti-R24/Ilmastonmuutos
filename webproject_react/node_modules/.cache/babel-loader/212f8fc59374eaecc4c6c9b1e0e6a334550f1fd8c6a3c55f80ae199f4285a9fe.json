{"ast":null,"code":"import { getDefaultOptions, setDefaultOptions as setInternalDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name setDefaultOptions\r\n * @category Common Helpers\r\n * @summary Set default options including locale.\r\n * @pure false\r\n *\r\n * @description\r\n * Sets the defaults for\r\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\r\n * arguments for all functions.\r\n *\r\n * @param {Object} newOptions - an object with options.\r\n * @param {Locale} [newOptions.locale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [newOptions.weekStartsOn] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [newOptions.firstWeekContainsDate] - the day of January, which is always in the first week of the year\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Set global locale:\r\n * import { es } from 'date-fns/locale'\r\n * setDefaultOptions({ locale: es })\r\n * const result = format(new Date(2014, 8, 2), 'PPPP')\r\n * //=> 'martes, 2 de septiembre de 2014'\r\n *\r\n * @example\r\n * // Start of the week for 2 September 2014:\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Start of the week for 2 September 2014,\r\n * // when we set that week starts on Monday by default:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Mon Sep 01 2014 00:00:00\r\n *\r\n * @example\r\n * // Manually set options take priority over default options:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * const result = startOfWeek(new Date(2014, 8, 2), { weekStartsOn: 0 })\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Remove the option by setting it to `undefined`:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * setDefaultOptions({ weekStartsOn: undefined })\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n */\n\nexport default function setDefaultOptions(newOptions) {\n  requiredArgs(1, arguments);\n  var result = {};\n  var defaultOptions = getDefaultOptions();\n  for (var property in defaultOptions) {\n    if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {\n      ;\n      result[property] = defaultOptions[property];\n    }\n  }\n  for (var _property in newOptions) {\n    if (Object.prototype.hasOwnProperty.call(newOptions, _property)) {\n      if (newOptions[_property] === undefined) {\n        delete result[_property];\n      } else {\n        ;\n        result[_property] = newOptions[_property];\n      }\n    }\n  }\n  setInternalDefaultOptions(result);\n}","map":{"version":3,"names":["getDefaultOptions","setDefaultOptions","setInternalDefaultOptions","requiredArgs","newOptions","arguments","result","defaultOptions","property","Object","prototype","hasOwnProperty","call","_property","undefined"],"sources":["C:/Users/Miia/Documents/Webbiprojekti/Ilmastonmuutos/webproject_react/node_modules/date-fns/esm/setDefaultOptions/index.js"],"sourcesContent":["import { getDefaultOptions, setDefaultOptions as setInternalDefaultOptions } from \"../_lib/defaultOptions/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name setDefaultOptions\r\n * @category Common Helpers\r\n * @summary Set default options including locale.\r\n * @pure false\r\n *\r\n * @description\r\n * Sets the defaults for\r\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\r\n * arguments for all functions.\r\n *\r\n * @param {Object} newOptions - an object with options.\r\n * @param {Locale} [newOptions.locale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [newOptions.weekStartsOn] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [newOptions.firstWeekContainsDate] - the day of January, which is always in the first week of the year\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Set global locale:\r\n * import { es } from 'date-fns/locale'\r\n * setDefaultOptions({ locale: es })\r\n * const result = format(new Date(2014, 8, 2), 'PPPP')\r\n * //=> 'martes, 2 de septiembre de 2014'\r\n *\r\n * @example\r\n * // Start of the week for 2 September 2014:\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Start of the week for 2 September 2014,\r\n * // when we set that week starts on Monday by default:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Mon Sep 01 2014 00:00:00\r\n *\r\n * @example\r\n * // Manually set options take priority over default options:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * const result = startOfWeek(new Date(2014, 8, 2), { weekStartsOn: 0 })\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Remove the option by setting it to `undefined`:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * setDefaultOptions({ weekStartsOn: undefined })\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n */\r\n\r\nexport default function setDefaultOptions(newOptions) {\r\n  requiredArgs(1, arguments);\r\n  var result = {};\r\n  var defaultOptions = getDefaultOptions();\r\n\r\n  for (var property in defaultOptions) {\r\n    if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {\r\n      ;\r\n      result[property] = defaultOptions[property];\r\n    }\r\n  }\r\n\r\n  for (var _property in newOptions) {\r\n    if (Object.prototype.hasOwnProperty.call(newOptions, _property)) {\r\n      if (newOptions[_property] === undefined) {\r\n        delete result[_property];\r\n      } else {\r\n        ;\r\n        result[_property] = newOptions[_property];\r\n      }\r\n    }\r\n  }\r\n\r\n  setInternalDefaultOptions(result);\r\n}"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,iBAAiB,IAAIC,yBAAyB,QAAQ,iCAAiC;AACnH,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASF,iBAAiB,CAACG,UAAU,EAAE;EACpDD,YAAY,CAAC,CAAC,EAAEE,SAAS,CAAC;EAC1B,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,cAAc,GAAGP,iBAAiB,EAAE;EAExC,KAAK,IAAIQ,QAAQ,IAAID,cAAc,EAAE;IACnC,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,cAAc,EAAEC,QAAQ,CAAC,EAAE;MAClE;MACAF,MAAM,CAACE,QAAQ,CAAC,GAAGD,cAAc,CAACC,QAAQ,CAAC;IAC7C;EACF;EAEA,KAAK,IAAIK,SAAS,IAAIT,UAAU,EAAE;IAChC,IAAIK,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,UAAU,EAAES,SAAS,CAAC,EAAE;MAC/D,IAAIT,UAAU,CAACS,SAAS,CAAC,KAAKC,SAAS,EAAE;QACvC,OAAOR,MAAM,CAACO,SAAS,CAAC;MAC1B,CAAC,MAAM;QACL;QACAP,MAAM,CAACO,SAAS,CAAC,GAAGT,UAAU,CAACS,SAAS,CAAC;MAC3C;IACF;EACF;EAEAX,yBAAyB,CAACI,MAAM,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}