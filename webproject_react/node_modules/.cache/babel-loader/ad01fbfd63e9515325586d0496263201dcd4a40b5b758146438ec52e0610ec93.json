{"ast":null,"code":"import requiredArgs from \"../_lib/requiredArgs/index.js\";\n// Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n// 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\nvar daysInYear = 365.2425;\n/**\r\n * @name milliseconds\r\n * @category Millisecond Helpers\r\n * @summary\r\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\r\n *\r\n * @description\r\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\r\n *\r\n * One years equals 365.2425 days according to the formula:\r\n *\r\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\r\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\r\n *\r\n * One month is a year divided by 12.\r\n *\r\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {number} the milliseconds\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // 1 year in milliseconds\r\n * milliseconds({ years: 1 })\r\n * //=> 31556952000\r\n *\r\n * // 3 months in milliseconds\r\n * milliseconds({ months: 3 })\r\n * //=> 7889238000\r\n */\n\nexport default function milliseconds(_ref) {\n  var years = _ref.years,\n    months = _ref.months,\n    weeks = _ref.weeks,\n    days = _ref.days,\n    hours = _ref.hours,\n    minutes = _ref.minutes,\n    seconds = _ref.seconds;\n  requiredArgs(1, arguments);\n  var totalDays = 0;\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n  var totalSeconds = totalDays * 24 * 60 * 60;\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n  return Math.round(totalSeconds * 1000);\n}","map":{"version":3,"names":["requiredArgs","daysInYear","milliseconds","_ref","years","months","weeks","days","hours","minutes","seconds","arguments","totalDays","totalSeconds","Math","round"],"sources":["C:/Users/Miia/Documents/Webbiprojekti/Ilmastonmuutos/webproject_react/node_modules/date-fns/esm/milliseconds/index.js"],"sourcesContent":["import requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n// Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\r\n// 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\r\nvar daysInYear = 365.2425;\r\n/**\r\n * @name milliseconds\r\n * @category Millisecond Helpers\r\n * @summary\r\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\r\n *\r\n * @description\r\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\r\n *\r\n * One years equals 365.2425 days according to the formula:\r\n *\r\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\r\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\r\n *\r\n * One month is a year divided by 12.\r\n *\r\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {number} the milliseconds\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // 1 year in milliseconds\r\n * milliseconds({ years: 1 })\r\n * //=> 31556952000\r\n *\r\n * // 3 months in milliseconds\r\n * milliseconds({ months: 3 })\r\n * //=> 7889238000\r\n */\r\n\r\nexport default function milliseconds(_ref) {\r\n  var years = _ref.years,\r\n      months = _ref.months,\r\n      weeks = _ref.weeks,\r\n      days = _ref.days,\r\n      hours = _ref.hours,\r\n      minutes = _ref.minutes,\r\n      seconds = _ref.seconds;\r\n  requiredArgs(1, arguments);\r\n  var totalDays = 0;\r\n  if (years) totalDays += years * daysInYear;\r\n  if (months) totalDays += months * (daysInYear / 12);\r\n  if (weeks) totalDays += weeks * 7;\r\n  if (days) totalDays += days;\r\n  var totalSeconds = totalDays * 24 * 60 * 60;\r\n  if (hours) totalSeconds += hours * 60 * 60;\r\n  if (minutes) totalSeconds += minutes * 60;\r\n  if (seconds) totalSeconds += seconds;\r\n  return Math.round(totalSeconds * 1000);\r\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA,IAAIC,UAAU,GAAG,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,YAAY,CAACC,IAAI,EAAE;EACzC,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,KAAK,GAAGH,IAAI,CAACG,KAAK;IAClBC,IAAI,GAAGJ,IAAI,CAACI,IAAI;IAChBC,KAAK,GAAGL,IAAI,CAACK,KAAK;IAClBC,OAAO,GAAGN,IAAI,CAACM,OAAO;IACtBC,OAAO,GAAGP,IAAI,CAACO,OAAO;EAC1BV,YAAY,CAAC,CAAC,EAAEW,SAAS,CAAC;EAC1B,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIR,KAAK,EAAEQ,SAAS,IAAIR,KAAK,GAAGH,UAAU;EAC1C,IAAII,MAAM,EAAEO,SAAS,IAAIP,MAAM,IAAIJ,UAAU,GAAG,EAAE,CAAC;EACnD,IAAIK,KAAK,EAAEM,SAAS,IAAIN,KAAK,GAAG,CAAC;EACjC,IAAIC,IAAI,EAAEK,SAAS,IAAIL,IAAI;EAC3B,IAAIM,YAAY,GAAGD,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;EAC3C,IAAIJ,KAAK,EAAEK,YAAY,IAAIL,KAAK,GAAG,EAAE,GAAG,EAAE;EAC1C,IAAIC,OAAO,EAAEI,YAAY,IAAIJ,OAAO,GAAG,EAAE;EACzC,IAAIC,OAAO,EAAEG,YAAY,IAAIH,OAAO;EACpC,OAAOI,IAAI,CAACC,KAAK,CAACF,YAAY,GAAG,IAAI,CAAC;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}