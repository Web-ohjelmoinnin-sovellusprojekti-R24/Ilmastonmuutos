{"ast":null,"code":"import addWeeks from \"../addWeeks/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\n\nexport default function eachWeekOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var startDateWeek = startOfWeek(startDate, options);\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  endTime = endDateWeek.getTime();\n  var weeks = [];\n  var currentWeek = startDateWeek;\n  while (currentWeek.getTime() <= endTime) {\n    currentWeek.setHours(0);\n    weeks.push(toDate(currentWeek));\n    currentWeek = addWeeks(currentWeek, 1);\n    currentWeek.setHours(15);\n  }\n  return weeks;\n}","map":{"version":3,"names":["addWeeks","startOfWeek","toDate","requiredArgs","eachWeekOfInterval","dirtyInterval","options","arguments","interval","startDate","start","endDate","end","endTime","getTime","RangeError","startDateWeek","endDateWeek","setHours","weeks","currentWeek","push"],"sources":["C:/Users/Miia/Documents/Webbiprojekti/Ilmastonmuutos/webproject_react/node_modules/date-fns/esm/eachWeekOfInterval/index.js"],"sourcesContent":["import addWeeks from \"../addWeeks/index.js\";\r\nimport startOfWeek from \"../startOfWeek/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @returns {Date[]} the array with starts of weeks from the week of the interval start to the week of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} `options.weekStartsOn` must be 0, 1, ..., 6\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\r\n\r\nexport default function eachWeekOfInterval(dirtyInterval, options) {\r\n  requiredArgs(1, arguments);\r\n  var interval = dirtyInterval || {};\r\n  var startDate = toDate(interval.start);\r\n  var endDate = toDate(interval.end);\r\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(startDate.getTime() <= endTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  var startDateWeek = startOfWeek(startDate, options);\r\n  var endDateWeek = startOfWeek(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\r\n\r\n  startDateWeek.setHours(15);\r\n  endDateWeek.setHours(15);\r\n  endTime = endDateWeek.getTime();\r\n  var weeks = [];\r\n  var currentWeek = startDateWeek;\r\n\r\n  while (currentWeek.getTime() <= endTime) {\r\n    currentWeek.setHours(0);\r\n    weeks.push(toDate(currentWeek));\r\n    currentWeek = addWeeks(currentWeek, 1);\r\n    currentWeek.setHours(15);\r\n  }\r\n\r\n  return weeks;\r\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,kBAAkB,CAACC,aAAa,EAAEC,OAAO,EAAE;EACjEH,YAAY,CAAC,CAAC,EAAEI,SAAS,CAAC;EAC1B,IAAIC,QAAQ,GAAGH,aAAa,IAAI,CAAC,CAAC;EAClC,IAAII,SAAS,GAAGP,MAAM,CAACM,QAAQ,CAACE,KAAK,CAAC;EACtC,IAAIC,OAAO,GAAGT,MAAM,CAACM,QAAQ,CAACI,GAAG,CAAC;EAClC,IAAIC,OAAO,GAAGF,OAAO,CAACG,OAAO,EAAE,CAAC,CAAC;;EAEjC,IAAI,EAAEL,SAAS,CAACK,OAAO,EAAE,IAAID,OAAO,CAAC,EAAE;IACrC,MAAM,IAAIE,UAAU,CAAC,kBAAkB,CAAC;EAC1C;EAEA,IAAIC,aAAa,GAAGf,WAAW,CAACQ,SAAS,EAAEH,OAAO,CAAC;EACnD,IAAIW,WAAW,GAAGhB,WAAW,CAACU,OAAO,EAAEL,OAAO,CAAC,CAAC,CAAC;;EAEjDU,aAAa,CAACE,QAAQ,CAAC,EAAE,CAAC;EAC1BD,WAAW,CAACC,QAAQ,CAAC,EAAE,CAAC;EACxBL,OAAO,GAAGI,WAAW,CAACH,OAAO,EAAE;EAC/B,IAAIK,KAAK,GAAG,EAAE;EACd,IAAIC,WAAW,GAAGJ,aAAa;EAE/B,OAAOI,WAAW,CAACN,OAAO,EAAE,IAAID,OAAO,EAAE;IACvCO,WAAW,CAACF,QAAQ,CAAC,CAAC,CAAC;IACvBC,KAAK,CAACE,IAAI,CAACnB,MAAM,CAACkB,WAAW,CAAC,CAAC;IAC/BA,WAAW,GAAGpB,QAAQ,CAACoB,WAAW,EAAE,CAAC,CAAC;IACtCA,WAAW,CAACF,QAAQ,CAAC,EAAE,CAAC;EAC1B;EAEA,OAAOC,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}