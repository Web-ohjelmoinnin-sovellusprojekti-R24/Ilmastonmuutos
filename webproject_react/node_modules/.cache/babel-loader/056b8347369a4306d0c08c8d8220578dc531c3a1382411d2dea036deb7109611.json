{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachYearOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each year between 6 February 2014 and 10 August 2017:\r\n * const result = eachYearOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2017, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Thu Jan 01 2015 00:00:00,\r\n * //   Fri Jan 01 2016 00:00:00,\r\n * //   Sun Jan 01 2017 00:00:00\r\n * // ]\r\n */\n\nexport default function eachYearOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setMonth(0, 1);\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\n  }\n  return dates;\n}","map":{"version":3,"names":["toDate","requiredArgs","eachYearOfInterval","dirtyInterval","arguments","interval","startDate","start","endDate","end","endTime","getTime","RangeError","dates","currentDate","setHours","setMonth","push","setFullYear","getFullYear"],"sources":["C:/Users/Miia/Documents/Webbiprojekti/Ilmastonmuutos/webproject_react/node_modules/date-fns/esm/eachYearOfInterval/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name eachYearOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @returns {Date[]} the array with starts of yearly timestamps from the month of the interval start to the month of the interval end\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each year between 6 February 2014 and 10 August 2017:\r\n * const result = eachYearOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2017, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Thu Jan 01 2015 00:00:00,\r\n * //   Fri Jan 01 2016 00:00:00,\r\n * //   Sun Jan 01 2017 00:00:00\r\n * // ]\r\n */\r\n\r\nexport default function eachYearOfInterval(dirtyInterval) {\r\n  requiredArgs(1, arguments);\r\n  var interval = dirtyInterval || {};\r\n  var startDate = toDate(interval.start);\r\n  var endDate = toDate(interval.end);\r\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\r\n\r\n  if (!(startDate.getTime() <= endTime)) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  var dates = [];\r\n  var currentDate = startDate;\r\n  currentDate.setHours(0, 0, 0, 0);\r\n  currentDate.setMonth(0, 1);\r\n\r\n  while (currentDate.getTime() <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate.setFullYear(currentDate.getFullYear() + 1);\r\n  }\r\n\r\n  return dates;\r\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,kBAAkB,CAACC,aAAa,EAAE;EACxDF,YAAY,CAAC,CAAC,EAAEG,SAAS,CAAC;EAC1B,IAAIC,QAAQ,GAAGF,aAAa,IAAI,CAAC,CAAC;EAClC,IAAIG,SAAS,GAAGN,MAAM,CAACK,QAAQ,CAACE,KAAK,CAAC;EACtC,IAAIC,OAAO,GAAGR,MAAM,CAACK,QAAQ,CAACI,GAAG,CAAC;EAClC,IAAIC,OAAO,GAAGF,OAAO,CAACG,OAAO,EAAE,CAAC,CAAC;;EAEjC,IAAI,EAAEL,SAAS,CAACK,OAAO,EAAE,IAAID,OAAO,CAAC,EAAE;IACrC,MAAM,IAAIE,UAAU,CAAC,kBAAkB,CAAC;EAC1C;EAEA,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,WAAW,GAAGR,SAAS;EAC3BQ,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCD,WAAW,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAE1B,OAAOF,WAAW,CAACH,OAAO,EAAE,IAAID,OAAO,EAAE;IACvCG,KAAK,CAACI,IAAI,CAACjB,MAAM,CAACc,WAAW,CAAC,CAAC;IAC/BA,WAAW,CAACI,WAAW,CAACJ,WAAW,CAACK,WAAW,EAAE,GAAG,CAAC,CAAC;EACxD;EAEA,OAAON,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}